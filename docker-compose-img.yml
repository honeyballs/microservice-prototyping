version: '3.7'
services:

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks: 
      - backend    

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    networks: 
      - backend  
    deploy: 
      mode: global 
    ports: 
      - target: 9092
        published: 9092
        protocol: tcp
        mode: host
      - target: 9093
        published: 9093
        protocol: tcp
        mode: host

    environment:
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092,LOCALHOST://:9093
#     Use the localhost advertised listener when accessing from outside the docker network (testing)      
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:29092,OUTSIDE://:9092,LOCALHOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "streams-plaintext-input:1:1, streams-pipe-output:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  db:
    image: honeyball/schema-pg:latest
    environment: 
      POSTGRES_PASSWORD: passwort
    ports:
      - "5432:5432"
    networks: 
      - backend   

  employee-administration:
    image: honeyball/micro-employee
    ports:
      - "8080:8080"
    environment: 
      - CONTAINER_NR={{ .Task.Slot }}   
    depends_on:
      - zookeeper
      - kafka  
      - db
    deploy:
      replicas: 2    
    networks: 
      - backend    

  project-administration:
    image: honeyball/micro-project
    ports:
      - "8090:8090"
    environment: 
      - CONTAINER_NR={{ .Task.Slot }} 
    depends_on:
      - zookeeper
      - kafka
      - db
    deploy:
      replicas: 2  
    networks: 
      - backend  

  worktime-administration:
    image: honeyball/micro-worktime
    ports:
      - "8085:8085"
    environment: 
      - CONTAINER_NR={{ .Task.Slot }}   
    depends_on:
      - zookeeper
      - kafka    
      - db
    deploy:
      replicas: 2 
    networks: 
      - backend  
      
networks: 
  backend:
    driver: overlay      
      